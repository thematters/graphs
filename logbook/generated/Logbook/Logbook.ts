// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Content extends ethereum.Event {
  get params(): Content__Params {
    return new Content__Params(this);
  }
}

export class Content__Params {
  _event: Content;

  constructor(event: Content) {
    this._event = event;
  }

  get author(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contentHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get content(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Donate extends ethereum.Event {
  get params(): Donate__Params {
    return new Donate__Params(this);
  }
}

export class Donate__Params {
  _event: Donate;

  constructor(event: Donate) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get donor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Fork extends ethereum.Event {
  get params(): Fork__Params {
    return new Fork__Params(this);
  }
}

export class Fork__Params {
  _event: Fork;

  constructor(event: Fork) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get end(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Pay extends ethereum.Event {
  get params(): Pay__Params {
    return new Pay__Params(this);
  }
}

export class Pay__Params {
  _event: Pay;

  constructor(event: Pay) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get purpose(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class Publish extends ethereum.Event {
  get params(): Publish__Params {
    return new Publish__Params(this);
  }
}

export class Publish__Params {
  _event: Publish;

  constructor(event: Publish) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contentHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SetDescription extends ethereum.Event {
  get params(): SetDescription__Params {
    return new SetDescription__Params(this);
  }
}

export class SetDescription__Params {
  _event: SetDescription;

  constructor(event: SetDescription) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class SetForkPrice extends ethereum.Event {
  get params(): SetForkPrice__Params {
    return new SetForkPrice__Params(this);
  }
}

export class SetForkPrice__Params {
  _event: SetForkPrice;

  constructor(event: SetForkPrice) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetTitle extends ethereum.Event {
  get params(): SetTitle__Params {
    return new SetTitle__Params(this);
  }
}

export class SetTitle__Params {
  _event: SetTitle;

  constructor(event: SetTitle) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Logbook__getLogbookResult {
  value0: BigInt;
  value1: Array<Bytes>;
  value2: Array<Address>;

  constructor(value0: BigInt, value1: Array<Bytes>, value2: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    map.set("value2", ethereum.Value.fromAddressArray(this.value2));
    return map;
  }
}

export class Logbook__logsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Logbook extends ethereum.SmartContract {
  static bind(address: Address): Logbook {
    return new Logbook("Logbook", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  books(param0: BigInt): BigInt {
    let result = super.call("books", "books(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_books(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("books", "books(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalance(account_: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(account_)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(account_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(account_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLogbook(tokenId_: BigInt): Logbook__getLogbookResult {
    let result = super.call(
      "getLogbook",
      "getLogbook(uint256):(uint256,bytes32[],address[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return new Logbook__getLogbookResult(
      result[0].toBigInt(),
      result[1].toBytesArray(),
      result[2].toAddressArray()
    );
  }

  try_getLogbook(
    tokenId_: BigInt
  ): ethereum.CallResult<Logbook__getLogbookResult> {
    let result = super.tryCall(
      "getLogbook",
      "getLogbook(uint256):(uint256,bytes32[],address[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Logbook__getLogbookResult(
        value[0].toBigInt(),
        value[1].toBytesArray(),
        value[2].toAddressArray()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  logs(param0: Bytes): Logbook__logsResult {
    let result = super.call("logs", "logs(bytes32):(address,uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return new Logbook__logsResult(result[0].toAddress(), result[1].toBigInt());
  }

  try_logs(param0: Bytes): ethereum.CallResult<Logbook__logsResult> {
    let result = super.tryCall("logs", "logs(bytes32):(address,uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Logbook__logsResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publicSale(): BigInt {
    let result = super.call("publicSale", "publicSale():(uint128)", []);

    return result[0].toBigInt();
  }

  try_publicSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("publicSale", "publicSale():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicSalePrice(): BigInt {
    let result = super.call(
      "publicSalePrice",
      "publicSalePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicSalePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicSalePrice",
      "publicSalePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  togglePublicSale(): BigInt {
    let result = super.call(
      "togglePublicSale",
      "togglePublicSale():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_togglePublicSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "togglePublicSale",
      "togglePublicSale():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get logrsId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class DonateWithCommissionCall extends ethereum.Call {
  get inputs(): DonateWithCommissionCall__Inputs {
    return new DonateWithCommissionCall__Inputs(this);
  }

  get outputs(): DonateWithCommissionCall__Outputs {
    return new DonateWithCommissionCall__Outputs(this);
  }
}

export class DonateWithCommissionCall__Inputs {
  _call: DonateWithCommissionCall;

  constructor(call: DonateWithCommissionCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commission_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get commissionBPS_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DonateWithCommissionCall__Outputs {
  _call: DonateWithCommissionCall;

  constructor(call: DonateWithCommissionCall) {
    this._call = call;
  }
}

export class ForkCall extends ethereum.Call {
  get inputs(): ForkCall__Inputs {
    return new ForkCall__Inputs(this);
  }

  get outputs(): ForkCall__Outputs {
    return new ForkCall__Outputs(this);
  }
}

export class ForkCall__Inputs {
  _call: ForkCall;

  constructor(call: ForkCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get end_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ForkCall__Outputs {
  _call: ForkCall;

  constructor(call: ForkCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ForkWithCommissionCall extends ethereum.Call {
  get inputs(): ForkWithCommissionCall__Inputs {
    return new ForkWithCommissionCall__Inputs(this);
  }

  get outputs(): ForkWithCommissionCall__Outputs {
    return new ForkWithCommissionCall__Outputs(this);
  }
}

export class ForkWithCommissionCall__Inputs {
  _call: ForkWithCommissionCall;

  constructor(call: ForkWithCommissionCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get end_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get commission_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get commissionBPS_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ForkWithCommissionCall__Outputs {
  _call: ForkWithCommissionCall;

  constructor(call: ForkWithCommissionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PublicSaleMintCall extends ethereum.Call {
  get inputs(): PublicSaleMintCall__Inputs {
    return new PublicSaleMintCall__Inputs(this);
  }

  get outputs(): PublicSaleMintCall__Outputs {
    return new PublicSaleMintCall__Outputs(this);
  }
}

export class PublicSaleMintCall__Inputs {
  _call: PublicSaleMintCall;

  constructor(call: PublicSaleMintCall) {
    this._call = call;
  }
}

export class PublicSaleMintCall__Outputs {
  _call: PublicSaleMintCall;

  constructor(call: PublicSaleMintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PublishCall extends ethereum.Call {
  get inputs(): PublishCall__Inputs {
    return new PublishCall__Inputs(this);
  }

  get outputs(): PublishCall__Outputs {
    return new PublishCall__Outputs(this);
  }
}

export class PublishCall__Inputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get content_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class PublishCall__Outputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetDescriptionCall extends ethereum.Call {
  get inputs(): SetDescriptionCall__Inputs {
    return new SetDescriptionCall__Inputs(this);
  }

  get outputs(): SetDescriptionCall__Outputs {
    return new SetDescriptionCall__Outputs(this);
  }
}

export class SetDescriptionCall__Inputs {
  _call: SetDescriptionCall;

  constructor(call: SetDescriptionCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get description_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetDescriptionCall__Outputs {
  _call: SetDescriptionCall;

  constructor(call: SetDescriptionCall) {
    this._call = call;
  }
}

export class SetForkPriceCall extends ethereum.Call {
  get inputs(): SetForkPriceCall__Inputs {
    return new SetForkPriceCall__Inputs(this);
  }

  get outputs(): SetForkPriceCall__Outputs {
    return new SetForkPriceCall__Outputs(this);
  }
}

export class SetForkPriceCall__Inputs {
  _call: SetForkPriceCall;

  constructor(call: SetForkPriceCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetForkPriceCall__Outputs {
  _call: SetForkPriceCall;

  constructor(call: SetForkPriceCall) {
    this._call = call;
  }
}

export class SetPublicSalePriceCall extends ethereum.Call {
  get inputs(): SetPublicSalePriceCall__Inputs {
    return new SetPublicSalePriceCall__Inputs(this);
  }

  get outputs(): SetPublicSalePriceCall__Outputs {
    return new SetPublicSalePriceCall__Outputs(this);
  }
}

export class SetPublicSalePriceCall__Inputs {
  _call: SetPublicSalePriceCall;

  constructor(call: SetPublicSalePriceCall) {
    this._call = call;
  }

  get price_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPublicSalePriceCall__Outputs {
  _call: SetPublicSalePriceCall;

  constructor(call: SetPublicSalePriceCall) {
    this._call = call;
  }
}

export class SetTitleCall extends ethereum.Call {
  get inputs(): SetTitleCall__Inputs {
    return new SetTitleCall__Inputs(this);
  }

  get outputs(): SetTitleCall__Outputs {
    return new SetTitleCall__Outputs(this);
  }
}

export class SetTitleCall__Inputs {
  _call: SetTitleCall;

  constructor(call: SetTitleCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get title_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTitleCall__Outputs {
  _call: SetTitleCall;

  constructor(call: SetTitleCall) {
    this._call = call;
  }
}

export class TogglePublicSaleCall extends ethereum.Call {
  get inputs(): TogglePublicSaleCall__Inputs {
    return new TogglePublicSaleCall__Inputs(this);
  }

  get outputs(): TogglePublicSaleCall__Outputs {
    return new TogglePublicSaleCall__Outputs(this);
  }
}

export class TogglePublicSaleCall__Inputs {
  _call: TogglePublicSaleCall;

  constructor(call: TogglePublicSaleCall) {
    this._call = call;
  }
}

export class TogglePublicSaleCall__Outputs {
  _call: TogglePublicSaleCall;

  constructor(call: TogglePublicSaleCall) {
    this._call = call;
  }

  get newPublicSale(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
