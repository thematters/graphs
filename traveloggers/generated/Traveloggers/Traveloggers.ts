// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LogbookNewLog extends ethereum.Event {
  get params(): LogbookNewLog__Params {
    return new LogbookNewLog__Params(this);
  }
}

export class LogbookNewLog__Params {
  _event: LogbookNewLog;

  constructor(event: LogbookNewLog) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LotteryWinners extends ethereum.Event {
  get params(): LotteryWinners__Params {
    return new LotteryWinners__Params(this);
  }
}

export class LotteryWinners__Params {
  _event: LotteryWinners;

  constructor(event: LotteryWinners) {
    this._event = event;
  }

  get winners(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PreOrderMinted extends ethereum.Event {
  get params(): PreOrderMinted__Params {
    return new PreOrderMinted__Params(this);
  }
}

export class PreOrderMinted__Params {
  _event: PreOrderMinted;

  constructor(event: PreOrderMinted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get n(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Traveloggers__readLogbookResultValue0Struct extends ethereum.Tuple {
  get logs(): Array<Traveloggers__readLogbookResultValue0LogsStruct> {
    return this[0].toTupleArray<
      Traveloggers__readLogbookResultValue0LogsStruct
    >();
  }

  get isLocked(): boolean {
    return this[1].toBoolean();
  }
}

export class Traveloggers__readLogbookResultValue0LogsStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get message(): string {
    return this[1].toString();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class Traveloggers extends ethereum.SmartContract {
  static bind(address: Address): Traveloggers {
    return new Traveloggers("Traveloggers", address);
  }

  _randomDraw(addresses_: Array<Address>, amount_: BigInt): Array<Address> {
    let result = super.call(
      "_randomDraw",
      "_randomDraw(address[],uint256):(address[])",
      [
        ethereum.Value.fromAddressArray(addresses_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );

    return result[0].toAddressArray();
  }

  try__randomDraw(
    addresses_: Array<Address>,
    amount_: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "_randomDraw",
      "_randomDraw(address[],uint256):(address[])",
      [
        ethereum.Value.fromAddressArray(addresses_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchMint(addresses_: Array<Address>, amount_: i32): Array<BigInt> {
    let result = super.call(
      "batchMint",
      "batchMint(address[],uint16):(uint256[])",
      [
        ethereum.Value.fromAddressArray(addresses_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(amount_))
      ]
    );

    return result[0].toBigIntArray();
  }

  try_batchMint(
    addresses_: Array<Address>,
    amount_: i32
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "batchMint",
      "batchMint(address[],uint16):(uint256[])",
      [
        ethereum.Value.fromAddressArray(addresses_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(amount_))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inPreOrder(): boolean {
    let result = super.call("inPreOrder", "inPreOrder():(bool)", []);

    return result[0].toBoolean();
  }

  try_inPreOrder(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inPreOrder", "inPreOrder():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  logbook(param0: BigInt): boolean {
    let result = super.call("logbook", "logbook(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_logbook(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("logbook", "logbook(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  preOrderExist(addr_: Address): boolean {
    let result = super.call("preOrderExist", "preOrderExist(address):(bool)", [
      ethereum.Value.fromAddress(addr_)
    ]);

    return result[0].toBoolean();
  }

  try_preOrderExist(addr_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "preOrderExist",
      "preOrderExist(address):(bool)",
      [ethereum.Value.fromAddress(addr_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  preOrderGet(addr_: Address): BigInt {
    let result = super.call("preOrderGet", "preOrderGet(address):(uint256)", [
      ethereum.Value.fromAddress(addr_)
    ]);

    return result[0].toBigInt();
  }

  try_preOrderGet(addr_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preOrderGet",
      "preOrderGet(address):(uint256)",
      [ethereum.Value.fromAddress(addr_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  preOrderLimit(): BigInt {
    let result = super.call("preOrderLimit", "preOrderLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_preOrderLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preOrderLimit",
      "preOrderLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  preOrderMinAmount(): BigInt {
    let result = super.call(
      "preOrderMinAmount",
      "preOrderMinAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_preOrderMinAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preOrderMinAmount",
      "preOrderMinAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  preOrderMintIndex(): BigInt {
    let result = super.call(
      "preOrderMintIndex",
      "preOrderMintIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_preOrderMintIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preOrderMintIndex",
      "preOrderMintIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  preOrderSupply(): BigInt {
    let result = super.call("preOrderSupply", "preOrderSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_preOrderSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preOrderSupply",
      "preOrderSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  readLogbook(tokenId_: BigInt): Traveloggers__readLogbookResultValue0Struct {
    let result = super.call(
      "readLogbook",
      "readLogbook(uint256):(((address,string,uint256)[],bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return changetype<Traveloggers__readLogbookResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_readLogbook(
    tokenId_: BigInt
  ): ethereum.CallResult<Traveloggers__readLogbookResultValue0Struct> {
    let result = super.tryCall(
      "readLogbook",
      "readLogbook(uint256):(((address,string,uint256)[],bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Traveloggers__readLogbookResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): i32 {
    let result = super.call("totalSupply", "totalSupply():(uint16)", []);

    return result[0].toI32();
  }

  try_totalSupply(): ethereum.CallResult<i32> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get supply_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get sharedBaseURI_(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AppendLogCall extends ethereum.Call {
  get inputs(): AppendLogCall__Inputs {
    return new AppendLogCall__Inputs(this);
  }

  get outputs(): AppendLogCall__Outputs {
    return new AppendLogCall__Outputs(this);
  }
}

export class AppendLogCall__Inputs {
  _call: AppendLogCall;

  constructor(call: AppendLogCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get message_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AppendLogCall__Outputs {
  _call: AppendLogCall;

  constructor(call: AppendLogCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchMintCall extends ethereum.Call {
  get inputs(): BatchMintCall__Inputs {
    return new BatchMintCall__Inputs(this);
  }

  get outputs(): BatchMintCall__Outputs {
    return new BatchMintCall__Outputs(this);
  }
}

export class BatchMintCall__Inputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }

  get addresses_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class BatchMintCall__Outputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DrawLotteryCall extends ethereum.Call {
  get inputs(): DrawLotteryCall__Inputs {
    return new DrawLotteryCall__Inputs(this);
  }

  get outputs(): DrawLotteryCall__Outputs {
    return new DrawLotteryCall__Outputs(this);
  }
}

export class DrawLotteryCall__Inputs {
  _call: DrawLotteryCall;

  constructor(call: DrawLotteryCall) {
    this._call = call;
  }

  get addresses_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DrawLotteryCall__Outputs {
  _call: DrawLotteryCall;

  constructor(call: DrawLotteryCall) {
    this._call = call;
  }
}

export class PreOrderCall extends ethereum.Call {
  get inputs(): PreOrderCall__Inputs {
    return new PreOrderCall__Inputs(this);
  }

  get outputs(): PreOrderCall__Outputs {
    return new PreOrderCall__Outputs(this);
  }
}

export class PreOrderCall__Inputs {
  _call: PreOrderCall;

  constructor(call: PreOrderCall) {
    this._call = call;
  }

  get n(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PreOrderCall__Outputs {
  _call: PreOrderCall;

  constructor(call: PreOrderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetInPreOrderCall extends ethereum.Call {
  get inputs(): SetInPreOrderCall__Inputs {
    return new SetInPreOrderCall__Inputs(this);
  }

  get outputs(): SetInPreOrderCall__Outputs {
    return new SetInPreOrderCall__Outputs(this);
  }
}

export class SetInPreOrderCall__Inputs {
  _call: SetInPreOrderCall;

  constructor(call: SetInPreOrderCall) {
    this._call = call;
  }

  get start_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get supply_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetInPreOrderCall__Outputs {
  _call: SetInPreOrderCall;

  constructor(call: SetInPreOrderCall) {
    this._call = call;
  }
}

export class SetPreOrderMinAmountCall extends ethereum.Call {
  get inputs(): SetPreOrderMinAmountCall__Inputs {
    return new SetPreOrderMinAmountCall__Inputs(this);
  }

  get outputs(): SetPreOrderMinAmountCall__Outputs {
    return new SetPreOrderMinAmountCall__Outputs(this);
  }
}

export class SetPreOrderMinAmountCall__Inputs {
  _call: SetPreOrderMinAmountCall;

  constructor(call: SetPreOrderMinAmountCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPreOrderMinAmountCall__Outputs {
  _call: SetPreOrderMinAmountCall;

  constructor(call: SetPreOrderMinAmountCall) {
    this._call = call;
  }
}

export class SetPreOrderSupplyCall extends ethereum.Call {
  get inputs(): SetPreOrderSupplyCall__Inputs {
    return new SetPreOrderSupplyCall__Inputs(this);
  }

  get outputs(): SetPreOrderSupplyCall__Outputs {
    return new SetPreOrderSupplyCall__Outputs(this);
  }
}

export class SetPreOrderSupplyCall__Inputs {
  _call: SetPreOrderSupplyCall;

  constructor(call: SetPreOrderSupplyCall) {
    this._call = call;
  }

  get supply_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPreOrderSupplyCall__Outputs {
  _call: SetPreOrderSupplyCall;

  constructor(call: SetPreOrderSupplyCall) {
    this._call = call;
  }
}

export class SetSharedBaseURICall extends ethereum.Call {
  get inputs(): SetSharedBaseURICall__Inputs {
    return new SetSharedBaseURICall__Inputs(this);
  }

  get outputs(): SetSharedBaseURICall__Outputs {
    return new SetSharedBaseURICall__Outputs(this);
  }
}

export class SetSharedBaseURICall__Inputs {
  _call: SetSharedBaseURICall;

  constructor(call: SetSharedBaseURICall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSharedBaseURICall__Outputs {
  _call: SetSharedBaseURICall;

  constructor(call: SetSharedBaseURICall) {
    this._call = call;
  }
}

export class SetSupplyCall extends ethereum.Call {
  get inputs(): SetSupplyCall__Inputs {
    return new SetSupplyCall__Inputs(this);
  }

  get outputs(): SetSupplyCall__Outputs {
    return new SetSupplyCall__Outputs(this);
  }
}

export class SetSupplyCall__Inputs {
  _call: SetSupplyCall;

  constructor(call: SetSupplyCall) {
    this._call = call;
  }

  get supply_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetSupplyCall__Outputs {
  _call: SetSupplyCall;

  constructor(call: SetSupplyCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get vault_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}
